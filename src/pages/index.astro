---
import Layout from "../layouts/Layout.astro";
import CourseCard from "../components/CourseCard.astro";
import FilterDropdown from "../molecules/FilterDropdown.astro";
import Heading from "../atoms/Heading.astro";
import fs from "node:fs";
import path from "node:path";
import type {Course} from "../models/types";
import {parse_curriculum_file_content} from "../utils/parser";

const courses: Course[] = (() => {
  try {
    return parse_curriculum_file_content(
      fs.readFileSync(path.resolve(process.cwd(), "curriculum.md"), "utf-8"),
    );
  } catch (error) {
    console.error(
      "Error reading or parsing curriculum.md:",
      error instanceof Error ? error.message : String(error),
    );
    return [];
  }
})();

const grouped_courses: Record<number, Course[]> = courses.reduce(
  (acc: Record<number, Course[]>, course: Course) => {
    (acc[course.semester] ??= []).push(course);
    return acc;
  },
  {} as Record<number, Course[]>,
);

const sorted_semester_keys: number[] = Object.keys(grouped_courses)
  .map(Number)
  .sort((a, b) => a - b);
const unique_semesters: number[] = [
  ...new Set(courses.map((c: Course) => c.semester)),
].sort((a: number, b: number) => a - b);
const sorted_difficulties: string[] = [
  "Fundamental",
  "Beginner",
  "Intermediate",
  "Advanced",
  "Unknown",
].filter(d => courses.some((c: Course) => c.difficulty === d));

const semester_options = unique_semesters.map(s => ({value: s, text: s}));
const difficulty_options = sorted_difficulties.map(d => ({value: d, text: d}));
---

<Layout title="Homepage | Fourth Wall Curriculum">
  <main class="container mx-auto px-4 py-8 text-white min-h-screen">
    <section class="py-12">
      <Heading
        level={2}
        text="Course Curriculum"
        extra_classes="text-4xl font-bold text-center mb-12"
      />

      <div class="flex flex-col sm:flex-row justify-center gap-4 mb-10 px-4">
        <FilterDropdown
          label_text="Filter by Semester:"
          id="semester-filter"
          name="semester"
          options={semester_options}
          default_option_text="All Semesters"
        />
        <FilterDropdown
          label_text="Filter by Difficulty:"
          id="difficulty-filter"
          name="difficulty"
          options={difficulty_options}
          default_option_text="All Difficulties"
        />
      </div>

      <div
        id="course-grid"
        class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 xl:gap-8">
        {
          sorted_semester_keys.length > 0 ? (
            sorted_semester_keys.map(semester_key => (
              <>
                <div
                  class="semester-header md:col-span-2 lg:col-span-3 mt-8 first:mt-0"
                  data-semester={semester_key}>
                  <Heading
                    level={3}
                    text={`Semester ${semester_key}`}
                    extra_classes="text-2xl font-semibold text-gray-400 pb-2 mb-4 border-b border-gray-700"
                  />
                </div>
                {grouped_courses[semester_key].map((course: Course) => (
                  <CourseCard {...course} />
                ))}
              </>
            ))
          ) : (
            <p class="text-center text-xl text-gray-400 md:col-span-2 lg:col-span-3">
              No courses found. Check curriculum.md or server console.
            </p>
          )
        }
        <p
          id="no-results-message"
          class="text-center text-xl text-gray-400 md:col-span-2 lg:col-span-3 hidden">
          No courses match the selected filters.
        </p>
      </div>
    </section>
  </main>

  <script>
    {
      const semester_filter = document.getElementById(
        "semester-filter",
      ) as HTMLSelectElement;
      const difficulty_filter = document.getElementById(
        "difficulty-filter",
      ) as HTMLSelectElement;
      const course_cards = document.querySelectorAll<HTMLDivElement>(
        ".course-card-wrapper",
      );
      const semester_headers =
        document.querySelectorAll<HTMLDivElement>(".semester-header");
      const no_results_message = document.getElementById(
        "no-results-message",
      ) as HTMLElement;

      function apply_filters(update_url = false) {
        if (
          !semester_filter ||
          !difficulty_filter ||
          !course_cards ||
          !no_results_message
        )
          return;

        const selected_semester = semester_filter.value;
        const selected_difficulty = difficulty_filter.value;

        if (update_url) {
          const params = new URLSearchParams(window.location.search);
          selected_semester === "all"
            ? params.delete("semester")
            : params.set("semester", selected_semester);
          selected_difficulty === "all"
            ? params.delete("difficulty")
            : params.set("difficulty", selected_difficulty);
          history.replaceState(
            null,
            "",
            `${window.location.pathname}${params.toString() ? "?" + params.toString() : ""}`,
          );
        }

        let visible_count = 0;
        const visible_semesters = new Set<string>();

        course_cards.forEach(card => {
          const matches =
            (selected_semester === "all" ||
              card.dataset.semester === selected_semester) &&
            (selected_difficulty === "all" ||
              card.dataset.difficulty === selected_difficulty);
          card.style.display = matches ? "block" : "none";
          if (matches) {
            visible_count++;
            visible_semesters.add(card.dataset.semester || "");
          }
        });

        semester_headers.forEach(header => {
          const semester = header.dataset.semester || "";
          const has_visible_cards = Array.from(
            document.querySelectorAll<HTMLDivElement>(
              `.course-card-wrapper[data-semester="${semester}"]`,
            ),
          ).some(card => card.style.display !== "none");
          header.style.display = has_visible_cards ? "block" : "none";
        });

        no_results_message.style.display =
          visible_count === 0 ? "block" : "none";
      }

      if (semester_filter && difficulty_filter) {
        const params = new URLSearchParams(window.location.search);
        semester_filter.value =
          new URLSearchParams(window.location.search).get("semester") || "all";
        difficulty_filter.value =
          new URLSearchParams(window.location.search).get("difficulty") ||
          "all";
        apply_filters();

        semester_filter.addEventListener("change", () => apply_filters(true));
        difficulty_filter.addEventListener("change", () => apply_filters(true));
        window.addEventListener("popstate", () => {
          semester_filter.value =
            new URLSearchParams(window.location.search).get("semester") ||
            "all";
          difficulty_filter.value =
            new URLSearchParams(window.location.search).get("difficulty") ||
            "all";
          apply_filters();
        });
      }
    }
  </script>
</Layout>
