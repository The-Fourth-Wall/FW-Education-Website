---
export type Props = {
  label_text: string;
  id: string;
  name: string;
  options: Array<{value: string | number; text: string | number}>;
  default_option_text: string;
  extra_classes?: string;
};

const {
  label_text,
  id,
  name,
  options,
  default_option_text,
  extra_classes = "",
} = Astro.props;
const unique_id = `custom-dropdown-${id}`;
---

<div class={`relative w-full sm:w-48 ${extra_classes}`.trim()}>
  <label for={id} class="block text-sm font-medium text-gray-400 mb-1"
    >{label_text}</label
  >
  {/* Hidden original select - keeps functionality and accessibility */}
  <select
    id={id}
    name={name}
    class="absolute inset-0 w-full h-full opacity-0 cursor-pointer">
    <option value="all">{default_option_text}</option>
    {options.map(option => <option value={option.value}>{option.text}</option>)}
  </select>

  {/* Custom styled dropdown button/display */}
  <button
    type="button"
    id={`${unique_id}-button`}
    aria-haspopup="listbox"
    aria-expanded="false"
    class="relative w-full cursor-pointer bg-gray-700 border border-gray-600 text-white text-sm rounded-lg focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 p-2.5 text-left flex justify-between items-center">
    <span id={`${unique_id}-selected`} class="block truncate"
      >{default_option_text}</span
    >
    <span class="pointer-events-none inset-y-0 right-0 flex items-center pr-2">
      <svg
        class="h-4 w-4 text-gray-400"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 20 20"
        fill="currentColor"
        aria-hidden="true">
        <path
          fill-rule="evenodd"
          d="M10 3a.75.75 0 01.53.22l3.5 3.5a.75.75 0 01-1.06 1.06L10 4.81 6.53 7.78a.75.75 0 01-1.06-1.06l3.5-3.5A.75.75 0 0110 3zm-3.72 9.53a.75.75 0 011.06 0L10 15.19l3.47-3.47a.75.75 0 111.06 1.06l-4 4a.75.75 0 01-1.06 0l-4-4a.75.75 0 010-1.06z"
          clip-rule="evenodd"></path>
      </svg>
    </span>
  </button>

  {/* Custom options panel */}
  <ul
    id={`${unique_id}-options`}
    class="absolute z-10 mt-1 w-full bg-gray-700 shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm hidden"
    tabindex="-1"
    role="listbox"
    aria-labelledby={`${unique_id}-button`}>
    <li
      class="text-gray-200 cursor-pointer select-none relative py-2 pl-3 pr-9 hover:bg-gray-600"
      data-value="all"
      role="option">
      <span class="font-normal block truncate">{default_option_text}</span>
    </li>
    {
      options.map(option => (
        <li
          class="text-gray-200 cursor-pointer select-none relative py-2 pl-3 pr-9 hover:bg-gray-600"
          data-value={option.value}
          role="option">
          <span class="font-normal block truncate">{option.text}</span>
        </li>
      ))
    }
  </ul>
</div>

<script define:vars={{unique_id, select_id: id}}>
  const button = document.getElementById(`${unique_id}-button`);
  const options_panel = document.getElementById(`${unique_id}-options`);
  const selected_display = document.getElementById(`${unique_id}-selected`);
  const hidden_select = document.getElementById(select_id);

  if (button && options_panel && selected_display && hidden_select) {
    button.addEventListener("click", () => {
      const is_expanded = button.getAttribute("aria-expanded") === "true";
      options_panel.classList.toggle("hidden");
      button.setAttribute("aria-expanded", String(!is_expanded));
    });

    options_panel.addEventListener("click", e => {
      const target_li = e.target.closest("li");
      if (target_li && target_li.dataset.value !== undefined) {
        const new_value = target_li.dataset.value;
        const new_text = target_li.textContent?.trim() || "";

        selected_display.textContent = new_text;
        hidden_select.value = new_value;

        hidden_select.dispatchEvent(new Event("change"));

        options_panel.classList.add("hidden");
        button.setAttribute("aria-expanded", "false");
      }
    });

    document.addEventListener("click", e => {
      if (!button.contains(e.target) && !options_panel.contains(e.target)) {
        options_panel.classList.add("hidden");
        button.setAttribute("aria-expanded", "false");
      }
    });

    const initial_option = hidden_select.options[hidden_select.selectedIndex];
    if (initial_option) {
      selected_display.textContent = initial_option.text;
    }
  }
</script>
